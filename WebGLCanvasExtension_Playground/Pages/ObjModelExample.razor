@page "/webglsharp"
@using GLMatrixSharp
@using System.Threading
@using WebGLSharp
@inject HttpClient Http

<h1>WebGLSharp</h1>

<p>Tests with loading custom mesh from .obj file and displaying it using custom helpers classes from WebGLSharp library.</p>

<BECanvas Width="640" Height="640" @ref="_canvasReference"></BECanvas>

@code {
    BECanvasComponent _canvasReference;
    ShaderProgram _shaderProgram;
    Mesh _cylinderMesh;
    Light _light;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var gl = await this._canvasReference.CreateWebGLAsync(new WebGLContextAttributes
            {
                PreserveDrawingBuffer = true,
                PowerPreference = WebGLContextAttributes.POWER_PREFERENCE_HIGH_PERFORMANCE
            });
            await gl.ClearColorAsync(0.1f, 0.1f, 0.3f, 1);
            await gl.EnableAsync(EnableCap.DEPTH_TEST);
            await gl.ClearAsync(BufferBits.COLOR_BUFFER_BIT | BufferBits.DEPTH_BUFFER_BIT);
            await gl.EnableAsync(EnableCap.CULL_FACE);
            await gl.FrontFaceAsync(FrontFaceDirection.CCW);
            await gl.CullFaceAsync(Face.BACK);
            _shaderProgram = await ShaderProgram.InitShaderProgram(
        gl,
        await Http.GetStringAsync("shaders/basic.vert"),
        await Http.GetStringAsync("shaders/basic.frag"),
        new List<string>() { "position", "normal", "uv" },
        new List<string>() { "model", "projection", "ambientLight", "lightDirection", "diffuse" });

            var geometry = Geometry.ParseObjFile(await Http.GetStringAsync("models/susan.obj"));
            var textureData = new int[40000];
            Random rnd = new Random();
            for (int i = 0; i < 40000; i = i + 4)
            {
                //Colors between 0-255
                textureData[i] = rnd.Next(200,245);
                textureData[i + 1] = 0;
                textureData[i + 2] = 115;
                textureData[i + 3] = 220;
            }
            var texture = await WebGLSharp.Texture.BuildAsync(gl, textureData);
            _cylinderMesh = await Mesh.BuildAsync(gl, geometry, texture);
            _light = new Light();

            await gl.UseProgramAsync(_shaderProgram.Program);
            await _light.UseAsync(_shaderProgram);
            var projectionMatrix = Mat4.Perspective((float)(45 * Math.PI / 180), 1f, 0.1f, 100f);
            projectionMatrix = Mat4.Translate(projectionMatrix, new float[3] { 0, 0, -6f });
            await gl.UniformMatrixAsync(_shaderProgram.Uniforms.GetValueOrDefault("projection"), false, projectionMatrix);
            Console.WriteLine("Drawing mesh");
            await _cylinderMesh.DrawAsync(_shaderProgram);
        }
    }
}
